// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { SystemHealthData, SystemHealthResponse, AccountLoginData, AccountLoginResponse, AccountLoginError, AccountLogoutData, AccountLogoutResponse, AccountProfileData, AccountProfileResponse, AccountRegisterData, AccountRegisterResponse, AccountRegisterError, ListUsersData, ListUsersResponse, ListUsersError, CreateUserData, CreateUserResponse, CreateUserError, DeleteUserData, DeleteUserResponse, DeleteUserError, GetUserData, GetUserResponse, GetUserError, UpdateUserData, UpdateUserResponse, UpdateUserError, ListTeamsData, ListTeamsResponse, ListTeamsError, CreateTeamData, CreateTeamResponse, CreateTeamError, DeleteTeamData, DeleteTeamResponse, DeleteTeamError, GetTeamData, GetTeamResponse, GetTeamError, UpdateTeamData, UpdateTeamResponse, UpdateTeamError, RevokeUserRoleData, RevokeUserRoleResponse, RevokeUserRoleError, AssignUserRoleData, AssignUserRoleResponse, AssignUserRoleError, RemoveMemberFromTeamData, RemoveMemberFromTeamResponse, RemoveMemberFromTeamError, AddMemberToTeamData, AddMemberToTeamResponse, AddMemberToTeamError, DeleteTagData, DeleteTagResponse, DeleteTagError, GetTagData, GetTagResponse, GetTagError, UpdateTagData, UpdateTagResponse, UpdateTagError, CreateTagData, CreateTagResponse, CreateTagError, ListTagsData, ListTagsResponse, ListTagsError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health Check
 */
export const systemHealth = <ThrowOnError extends boolean = false>(options?: Options<SystemHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SystemHealthResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/health',
        ...options
    });
};

/**
 * Login
 */
export const accountLogin = <ThrowOnError extends boolean = false>(options: Options<AccountLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccountLoginResponse, AccountLoginError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Logout
 */
export const accountLogout = <ThrowOnError extends boolean = false>(options?: Options<AccountLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access/logout',
        ...options
    });
};

/**
 * Profile
 */
export const accountProfile = <ThrowOnError extends boolean = false>(options?: Options<AccountProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccountProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/me',
        ...options
    });
};

/**
 * Signup
 */
export const accountRegister = <ThrowOnError extends boolean = false>(options: Options<AccountRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccountRegisterResponse, AccountRegisterError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * ListUsers
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponse, ListUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options
    });
};

/**
 * CreateUser
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * DeleteUser
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * GetUser
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * UpdateUser
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * ListTeams
 */
export const listTeams = <ThrowOnError extends boolean = false>(options?: Options<ListTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeamsResponse, ListTeamsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams',
        ...options
    });
};

/**
 * CreateTeam
 */
export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamResponse, CreateTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * DeleteTeam
 */
export const deleteTeam = <ThrowOnError extends boolean = false>(options: Options<DeleteTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTeamResponse, DeleteTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams/{team_id}',
        ...options
    });
};

/**
 * GetTeam
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamResponse, GetTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams/{team_id}',
        ...options
    });
};

/**
 * UpdateTeam
 */
export const updateTeam = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTeamResponse, UpdateTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams/{team_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * RevokeRole
 */
export const revokeUserRole = <ThrowOnError extends boolean = false>(options: Options<RevokeUserRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RevokeUserRoleResponse, RevokeUserRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * AssignRole
 */
export const assignUserRole = <ThrowOnError extends boolean = false>(options: Options<AssignUserRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignUserRoleResponse, AssignUserRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * RemoveMemberFromTeam
 */
export const removeMemberFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveMemberFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveMemberFromTeamResponse, RemoveMemberFromTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams/{team_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * AddMemberToTeam
 */
export const addMemberToTeam = <ThrowOnError extends boolean = false>(options: Options<AddMemberToTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMemberToTeamResponse, AddMemberToTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/teams/{team_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * DeleteTag
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponse, DeleteTagError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/tags/{tag_id}',
        ...options
    });
};

/**
 * GetTag
 */
export const getTag = <ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagResponse, GetTagError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/tags/{tag_id}',
        ...options
    });
};

/**
 * UpdateTag
 */
export const updateTag = <ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTagResponse, UpdateTagError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * CreateTag
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponse, CreateTagError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * ListTags
 */
export const listTags = <ThrowOnError extends boolean = false>(options?: Options<ListTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTagsResponse, ListTagsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/tags',
        ...options
    });
};