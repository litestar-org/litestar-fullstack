// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { SystemHealthData, SystemHealthResponse, AccountLoginData, AccountLoginResponse, AccountLoginError, AccountLogoutData, AccountLogoutResponse, AccountProfileData, AccountProfileResponse, AccountRegisterData, AccountRegisterResponse, AccountRegisterError, ListUsersData, ListUsersResponse, ListUsersError, CreateUserData, CreateUserResponse, CreateUserError, DeleteUserData, DeleteUserResponse, DeleteUserError, GetUserData, GetUserResponse, GetUserError, UpdateUserData, UpdateUserResponse, UpdateUserError, ListTeamsData, ListTeamsResponse, ListTeamsError, CreateTeamData, CreateTeamResponse, CreateTeamError, DeleteTeamData, DeleteTeamResponse, DeleteTeamError, GetTeamData, GetTeamResponse, GetTeamError, UpdateTeamData, UpdateTeamResponse, UpdateTeamError, AssignUserRoleData, AssignUserRoleResponse, AssignUserRoleError, RevokeUserRoleData, RevokeUserRoleResponse, RevokeUserRoleError, AddMemberToTeamData, AddMemberToTeamResponse, AddMemberToTeamError, RemoveMemberFromTeamData, RemoveMemberFromTeamResponse, RemoveMemberFromTeamError, ListTagsData, ListTagsResponse, ListTagsError, CreateTagData, CreateTagResponse, CreateTagError, DeleteTagData, DeleteTagResponse, DeleteTagError, GetTagData, GetTagResponse, GetTagError, UpdateTagData, UpdateTagResponse, UpdateTagError } from './types.gen';

export const client = createClient(createConfig());

export class SystemService {
    /**
     * Health Check
     * Execute a health check against backend components.  Returns system information including database and cache status.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options?: Options<SystemHealthData, ThrowOnError>) {
        return (options?.client ?? client).get<SystemHealthResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/health',
            ...options
        });
    }
    
}

export class AccessService {
    /**
     * Login
     * Authenticate a user.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<AccountLoginData, ThrowOnError>) {
        return (options?.client ?? client).post<AccountLoginResponse, AccountLoginError, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/access/login',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options?.headers
            }
        });
    }
    
    /**
     * Logout
     * Account Logout
     */
    public static defaultName<ThrowOnError extends boolean = false>(options?: Options<AccountLogoutData, ThrowOnError>) {
        return (options?.client ?? client).post<AccountLogoutResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/access/logout',
            ...options
        });
    }
    
    /**
     * Profile
     * User Profile.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options?: Options<AccountProfileData, ThrowOnError>) {
        return (options?.client ?? client).get<AccountProfileResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/me',
            ...options
        });
    }
    
    /**
     * Signup
     * User Signup.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<AccountRegisterData, ThrowOnError>) {
        return (options?.client ?? client).post<AccountRegisterResponse, AccountRegisterError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/access/signup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class UserAccountsService {
    /**
     * ListUsers
     * List users.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListUsersResponse, ListUsersError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users',
            ...options
        });
    }
    
    /**
     * CreateUser
     * Create a new user.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * DeleteUser
     * Delete a user from the system.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users/{user_id}',
            ...options
        });
    }
    
    /**
     * GetUser
     * Get a user.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users/{user_id}',
            ...options
        });
    }
    
    /**
     * UpdateUser
     * Create a new user.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class TeamsService {
    /**
     * ListTeams
     * List teams that your account can access..
     */
    public static defaultName<ThrowOnError extends boolean = false>(options?: Options<ListTeamsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListTeamsResponse, ListTeamsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams',
            ...options
        });
    }
    
    /**
     * CreateTeam
     * Create a new team.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTeamResponse, CreateTeamError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * DeleteTeam
     * Delete a team.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<DeleteTeamData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTeamResponse, DeleteTeamError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams/{team_id}',
            ...options
        });
    }
    
    /**
     * GetTeam
     * Get details about a team.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTeamResponse, GetTeamError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams/{team_id}',
            ...options
        });
    }
    
    /**
     * UpdateTeam
     * Update a migration team.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<UpdateTeamData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateTeamResponse, UpdateTeamError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams/{team_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class UserAccountRolesService {
    /**
     * AssignRole
     * Create a new migration role.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<AssignUserRoleData, ThrowOnError>) {
        return (options?.client ?? client).post<AssignUserRoleResponse, AssignUserRoleError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/roles/{role_slug}/assign',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * RevokeRole
     * Delete a role from the system.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<RevokeUserRoleData, ThrowOnError>) {
        return (options?.client ?? client).post<RevokeUserRoleResponse, RevokeUserRoleError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/roles/{role_slug}/revoke',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class TeamMembersService {
    /**
     * AddMemberToTeam
     * Add a member to a team.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<AddMemberToTeamData, ThrowOnError>) {
        return (options?.client ?? client).post<AddMemberToTeamResponse, AddMemberToTeamError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams/{team_id}/members/add',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * RemoveMemberFromTeam
     * Revoke a members access to a team.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<RemoveMemberFromTeamData, ThrowOnError>) {
        return (options?.client ?? client).post<RemoveMemberFromTeamResponse, RemoveMemberFromTeamError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/teams/{team_id}/members/remove',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class TagsService {
    /**
     * ListTags
     * List tags.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options?: Options<ListTagsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListTagsResponse, ListTagsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/tags',
            ...options
        });
    }
    
    /**
     * CreateTag
     * Create a new tag.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTagResponse, CreateTagError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * DeleteTag
     * Delete a tag.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTagResponse, DeleteTagError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/tags/{tag_id}',
            ...options
        });
    }
    
    /**
     * GetTag
     * Get a tag.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTagResponse, GetTagError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/tags/{tag_id}',
            ...options
        });
    }
    
    /**
     * UpdateTag
     * Update a tag.
     */
    public static defaultName<ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateTagResponse, UpdateTagError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/tags/{tag_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}