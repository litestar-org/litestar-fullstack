// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAccountLogin = z.object({
    username: z.string(),
    password: z.string()
});

export const zAccountRegister = z.object({
    email: z.string(),
    password: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zCreateTagTagRequestBody = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    slug: z.string()
});

export const zCreateTagTagResponseBody = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    id: z.string().uuid().optional(),
    slug: z.string()
});

export const zGetTagTagResponseBody = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    id: z.string().uuid().optional(),
    slug: z.string()
});

export const zListTagsTagResponseBody = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    id: z.string().uuid().optional(),
    slug: z.string()
});

export const zMessage = z.object({
    message: z.string()
});

export const zOAuth2Login = z.object({
    access_token: z.string(),
    token_type: z.string(),
    refresh_token: z.union([
        z.string(),
        z.null()
    ]).optional(),
    expires_in: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zOauthAccount = z.object({
    id: z.string().uuid(),
    oauthName: z.string(),
    accessToken: z.string(),
    accountId: z.string(),
    accountEmail: z.string(),
    expiresAt: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSystemHealth = z.object({
    database_status: z.enum([
        'online',
        'offline'
    ]),
    cache_status: z.enum([
        'online',
        'offline'
    ]),
    app: z.string().optional().default('app'),
    version: z.string().optional().default('0.2.0')
});

export const zTeam = z.object({
    id: z.string().uuid(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    members: z.array(z.object({
        id: z.string().uuid(),
        userId: z.string().uuid(),
        email: z.string(),
        name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        role: z.union([
            z.enum([
                'ADMIN',
                'MEMBER'
            ]),
            z.null()
        ]).optional(),
        isOwner: z.union([
            z.boolean().default(false),
            z.null()
        ]).optional()
    })).optional(),
    tags: z.array(z.object({
        id: z.string().uuid(),
        slug: z.string(),
        name: z.string()
    })).optional()
});

export const zTeamCreate = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    tags: z.array(z.string()).optional()
});

export const zTeamMember = z.object({
    id: z.string().uuid(),
    userId: z.string().uuid(),
    email: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    role: z.union([
        z.enum([
            'ADMIN',
            'MEMBER'
        ]),
        z.null()
    ]).optional(),
    isOwner: z.union([
        z.boolean().default(false),
        z.null()
    ]).optional()
});

export const zTeamMemberModify = z.object({
    userName: z.string()
});

export const zTeamRoles = z.enum([
    'ADMIN',
    'MEMBER'
]);

export const zTeamTag = z.object({
    id: z.string().uuid(),
    slug: z.string(),
    name: z.string()
});

export const zTeamUpdate = z.object({
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    tags: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zUpdateTagTagRequestBody = z.object({
    name: z.string().optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    slug: z.string().optional()
});

export const zUpdateTagTagResponseBody = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    id: z.string().uuid().optional(),
    slug: z.string()
});

export const zUser = z.object({
    id: z.string().uuid(),
    email: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    isSuperuser: z.boolean().optional().default(false),
    isActive: z.boolean().optional().default(false),
    isVerified: z.boolean().optional().default(false),
    hasPassword: z.boolean().optional().default(false),
    teams: z.array(z.object({
        teamId: z.string().uuid(),
        teamName: z.string(),
        isOwner: z.boolean().optional().default(false),
        role: zTeamRoles.optional()
    })).optional(),
    roles: z.array(z.object({
        roleId: z.string().uuid(),
        roleSlug: z.string(),
        roleName: z.string(),
        assignedAt: z.string().datetime()
    })).optional(),
    oauthAccounts: z.array(zOauthAccount).optional()
});

export const zUserCreate = z.object({
    email: z.string(),
    password: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    isSuperuser: z.boolean().optional().default(false),
    isActive: z.boolean().optional().default(true),
    isVerified: z.boolean().optional().default(false)
});

export const zUserRole = z.object({
    roleId: z.string().uuid(),
    roleSlug: z.string(),
    roleName: z.string(),
    assignedAt: z.string().datetime()
});

export const zUserRoleAdd = z.object({
    userName: z.string()
});

export const zUserRoleRevoke = z.object({
    userName: z.string()
});

export const zUserTeam = z.object({
    teamId: z.string().uuid(),
    teamName: z.string(),
    isOwner: z.boolean().optional().default(false),
    role: zTeamRoles.optional()
});

export const zUserUpdate = z.object({
    email: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    isSuperuser: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    isActive: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    isVerified: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zSystemHealthResponse = zSystemHealth;

export const zAccountLoginResponse = zOAuth2Login;

export const zAccountLogoutResponse = z.object({});

export const zAccountProfileResponse = zUser;

export const zAccountRegisterResponse = zUser;

export const zListUsersResponse = z.object({
    items: z.array(zUser).optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
    total: z.number().int().optional()
});

export const zCreateUserResponse = zUser;

export const zDeleteUserResponse = z.void();

export const zGetUserResponse = zUser;

export const zUpdateUserResponse = zUser;

export const zListTeamsResponse = z.object({
    items: z.array(zTeam).optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
    total: z.number().int().optional()
});

export const zCreateTeamResponse = zTeam;

export const zDeleteTeamResponse = z.void();

export const zGetTeamResponse = zTeam;

export const zUpdateTeamResponse = zTeam;

export const zAssignUserRoleResponse = zMessage;

export const zRevokeUserRoleResponse = zMessage;

export const zAddMemberToTeamResponse = zTeam;

export const zRemoveMemberFromTeamResponse = zTeam;

export const zListTagsResponse = z.object({
    items: z.array(zListTagsTagResponseBody).optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
    total: z.number().int().optional()
});

export const zCreateTagResponse = zCreateTagTagResponseBody;

export const zDeleteTagResponse = z.void();

export const zGetTagResponse = zGetTagTagResponseBody;

export const zUpdateTagResponse = zUpdateTagTagResponseBody;
