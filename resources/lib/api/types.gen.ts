// This file is auto-generated by @hey-api/openapi-ts

export type AccountLogin = {
    username: string;
    password: string;
};

export type AccountRegister = {
    email: string;
    password: string;
    name?: (string | null);
};

export type CreateTagTagRequestBody = {
    name: string;
    description?: (string | null);
    slug: string;
};

export type CreateTagTagResponseBody = {
    name: string;
    description?: (string | null);
    id?: string;
    slug: string;
};

export type GetTagTagResponseBody = {
    name: string;
    description?: (string | null);
    id?: string;
    slug: string;
};

export type ListTagsTagResponseBody = {
    name: string;
    description?: (string | null);
    id?: string;
    slug: string;
};

export type Message = {
    message: string;
};

export type OAuth2Login = {
    access_token: string;
    token_type: string;
    refresh_token?: (string | null);
    expires_in?: (number | null);
};

export type OauthAccount = {
    id: string;
    oauthName: string;
    accessToken: string;
    accountId: string;
    accountEmail: string;
    expiresAt?: (number | null);
    refreshToken?: (string | null);
};

export type QueueInfo = {
    workers: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    name: string;
    queued: number;
    active: number;
    scheduled: number;
    jobs: Array<{
        [key: string]: unknown;
    }>;
};

export type SystemHealth = {
    database_status: 'online' | 'offline';
    cache_status: 'online' | 'offline';
    app?: string;
    version?: string;
};

export type database_status = 'online' | 'offline';

export type cache_status = 'online' | 'offline';

export type Team = {
    id: string;
    name: string;
    description?: (string | null);
    members?: Array<TeamMember>;
    tags?: Array<TeamTag>;
};

export type TeamCreate = {
    name: string;
    description?: (string | null);
    tags?: Array<(string)>;
};

export type TeamMember = {
    id: string;
    userId: string;
    email: string;
    name?: (string | null);
    role?: (TeamRoles | null);
    isOwner?: (boolean | null);
};

export type TeamMemberModify = {
    userName: string;
};

/**
 * Valid Values for Team Roles.
 */
export type TeamRoles = 'ADMIN' | 'MEMBER';

export type TeamTag = {
    id: string;
    slug: string;
    name: string;
};

export type TeamUpdate = {
    name?: (string | null);
    description?: (string | null);
    tags?: (Array<(string)> | null);
};

export type UpdateTagTagRequestBody = {
    name?: (string);
    description?: (string | null);
    slug?: (string);
};

export type UpdateTagTagResponseBody = {
    name: string;
    description?: (string | null);
    id?: string;
    slug: string;
};

export type User = {
    id: string;
    email: string;
    name?: (string | null);
    isSuperuser?: boolean;
    isActive?: boolean;
    isVerified?: boolean;
    hasPassword?: boolean;
    teams?: Array<UserTeam>;
    roles?: Array<UserRole>;
    oauthAccounts?: Array<OauthAccount>;
};

export type UserCreate = {
    email: string;
    password: string;
    name?: (string | null);
    isSuperuser?: boolean;
    isActive?: boolean;
    isVerified?: boolean;
};

export type UserRole = {
    roleId: string;
    roleSlug: string;
    roleName: string;
    assignedAt: string;
};

export type UserRoleAdd = {
    userName: string;
};

export type UserRoleRevoke = {
    userName: string;
};

export type UserTeam = {
    teamId: string;
    teamName: string;
    isOwner?: boolean;
    role?: TeamRoles;
};

export type UserUpdate = {
    email?: (string | null);
    password?: (string | null);
    name?: (string | null);
    isSuperuser?: (boolean | null);
    isActive?: (boolean | null);
    isVerified?: (boolean | null);
};

export type AccountLoginData = {
    formData: AccountLogin;
};

export type AccountLoginResponse = (OAuth2Login);

export type AccountLogoutResponse = ({
    [key: string]: unknown;
});

export type AccountProfileResponse = (User);

export type AccountRegisterData = {
    requestBody: AccountRegister;
};

export type AccountRegisterResponse = (User);

export type WorkerJobAbortData = {
    jobId: string;
    queueId: string;
};

export type WorkerJobAbortResponse = ({
    [key: string]: unknown;
});

export type WorkerJobDetailData = {
    jobId: string;
    queueId: string;
};

export type WorkerJobDetailResponse = ({
    [key: string]: unknown;
});

export type WorkerJobRetryData = {
    jobId: string;
    queueId: string;
};

export type WorkerJobRetryResponse = ({
    [key: string]: unknown;
});

export type WorkerQueueDetailData = {
    queueId: string;
};

export type WorkerQueueDetailResponse = ({
    [key: string]: QueueInfo;
});

export type WorkerQueueListResponse = ({
    [key: string]: Array<QueueInfo>;
});

export type SystemHealthResponse = (SystemHealth);

export type ListTagsData = {
    createdAfter?: (string | null);
    createdBefore?: (string | null);
    ids?: (Array<(string)> | null);
    orderBy?: (string | null);
    searchField?: (string | null);
    searchIgnoreCase?: (boolean | null);
    searchString?: (string | null);
    sortOrder?: ('asc' | 'desc') | null;
    updatedAfter?: (string | null);
    updatedBefore?: (string | null);
};

export type ListTagsResponse = ({
    items?: Array<ListTagsTagResponseBody>;
    /**
     * Maximal number of items to send.
     */
    limit?: number;
    /**
     * Offset from the beginning of the query.
     */
    offset?: number;
    /**
     * Total number of items.
     */
    total?: number;
});

export type CreateTagData = {
    requestBody: CreateTagTagRequestBody;
};

export type CreateTagResponse = (CreateTagTagResponseBody);

export type GetTagData = {
    /**
     * The tag to retrieve.
     */
    tagId: string;
};

export type GetTagResponse = (GetTagTagResponseBody);

export type DeleteTagData = {
    /**
     * The tag to delete.
     */
    tagId: string;
};

export type DeleteTagResponse = (void);

export type UpdateTagData = {
    requestBody: UpdateTagTagRequestBody;
    /**
     * The tag to update.
     */
    tagId: string;
};

export type UpdateTagResponse = (UpdateTagTagResponseBody);

export type AddMemberToTeamData = {
    requestBody: TeamMemberModify;
    /**
     * The team to update.
     */
    teamId: string;
    usersService: unknown;
};

export type AddMemberToTeamResponse = (Team);

export type RemoveMemberFromTeamData = {
    requestBody: TeamMemberModify;
    /**
     * The team to delete.
     */
    teamId: string;
    usersService: unknown;
};

export type RemoveMemberFromTeamResponse = (Team);

export type ListTeamsData = {
    ids?: (Array<(string)> | null);
};

export type ListTeamsResponse = ({
    items?: Array<Team>;
    /**
     * Maximal number of items to send.
     */
    limit?: number;
    /**
     * Offset from the beginning of the query.
     */
    offset?: number;
    /**
     * Total number of items.
     */
    total?: number;
});

export type CreateTeamData = {
    requestBody: TeamCreate;
};

export type CreateTeamResponse = (Team);

export type GetTeamData = {
    /**
     * The team to retrieve.
     */
    teamId: string;
};

export type GetTeamResponse = (Team);

export type DeleteTeamData = {
    /**
     * The team to delete.
     */
    teamId: string;
};

export type DeleteTeamResponse = (void);

export type UpdateTeamData = {
    requestBody: TeamUpdate;
    /**
     * The team to update.
     */
    teamId: string;
};

export type UpdateTeamResponse = (Team);

export type AssignUserRoleData = {
    requestBody: UserRoleAdd;
    /**
     * The role to grant.
     */
    roleSlug: string;
};

export type AssignUserRoleResponse = (Message);

export type RevokeUserRoleData = {
    requestBody: UserRoleRevoke;
    /**
     * The role to revoke.
     */
    roleSlug: string;
};

export type RevokeUserRoleResponse = (Message);

export type ListUsersData = {
    createdAfter?: (string | null);
    createdBefore?: (string | null);
    currentPage?: number;
    ids?: (Array<(string)> | null);
    orderBy?: (string | null);
    pageSize?: number;
    searchField?: (string | null);
    searchIgnoreCase?: (boolean | null);
    searchString?: (string | null);
    sortOrder?: ('asc' | 'desc') | null;
    updatedAfter?: (string | null);
    updatedBefore?: (string | null);
};

export type ListUsersResponse = ({
    items?: Array<User>;
    /**
     * Maximal number of items to send.
     */
    limit?: number;
    /**
     * Offset from the beginning of the query.
     */
    offset?: number;
    /**
     * Total number of items.
     */
    total?: number;
});

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = (User);

export type GetUserData = {
    /**
     * The user to retrieve.
     */
    userId: string;
};

export type GetUserResponse = (User);

export type DeleteUserData = {
    /**
     * The user to delete.
     */
    userId: string;
};

export type DeleteUserResponse = (void);

export type UpdateUserData = {
    requestBody: UserUpdate;
    /**
     * The user to update.
     */
    userId: string;
};

export type UpdateUserResponse = (User);