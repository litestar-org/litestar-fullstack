// This file is auto-generated by @hey-api/openapi-ts

export type AccountLogin = {
    username: string;
    password: string;
};

export type AccountRegister = {
    email: string;
    password: string;
    name?: string | null;
};

export type CreateTagTagRequestBody = {
    name: string;
    description?: string | null;
    slug: string;
};

export type CreateTagTagResponseBody = {
    name: string;
    description?: string | null;
    id?: string;
    slug: string;
};

export type GetTagTagResponseBody = {
    name: string;
    description?: string | null;
    id?: string;
    slug: string;
};

export type ListTagsTagResponseBody = {
    name: string;
    description?: string | null;
    id?: string;
    slug: string;
};

export type Message = {
    message: string;
};

export type OAuth2Login = {
    access_token: string;
    token_type: string;
    refresh_token?: string | null;
    expires_in?: number | null;
};

export type OauthAccount = {
    id: string;
    oauthName: string;
    accessToken: string;
    accountId: string;
    accountEmail: string;
    expiresAt?: number | null;
    refreshToken?: string | null;
};

export type SystemHealth = {
    database_status: 'online' | 'offline';
    cache_status: 'online' | 'offline';
    app?: string;
    version?: string;
};

export type Team = {
    id: string;
    name: string;
    description?: string | null;
    members?: Array<TeamMember>;
    tags?: Array<TeamTag>;
};

export type TeamCreate = {
    name: string;
    description?: string | null;
    tags?: Array<string>;
};

export type TeamMember = {
    id: string;
    userId: string;
    email: string;
    name?: string | null;
    role?: TeamRoles | null;
    isOwner?: boolean | null;
};

export type TeamMemberModify = {
    userName: string;
};

/**
 * Valid Values for Team Roles.
 */
export type TeamRoles = 'ADMIN' | 'MEMBER';

export type TeamTag = {
    id: string;
    slug: string;
    name: string;
};

export type TeamUpdate = {
    name?: string | null;
    description?: string | null;
    tags?: Array<string> | null;
};

export type UpdateTagTagRequestBody = {
    name?: string;
    description?: string | null;
    slug?: string;
};

export type UpdateTagTagResponseBody = {
    name: string;
    description?: string | null;
    id?: string;
    slug: string;
};

export type User = {
    id: string;
    email: string;
    name?: string | null;
    isSuperuser?: boolean;
    isActive?: boolean;
    isVerified?: boolean;
    hasPassword?: boolean;
    teams?: Array<UserTeam>;
    roles?: Array<UserRole>;
    oauthAccounts?: Array<OauthAccount>;
};

export type UserCreate = {
    email: string;
    password: string;
    name?: string | null;
    isSuperuser?: boolean;
    isActive?: boolean;
    isVerified?: boolean;
};

export type UserRole = {
    roleId: string;
    roleSlug: string;
    roleName: string;
    assignedAt: string;
};

export type UserRoleAdd = {
    userName: string;
};

export type UserRoleRevoke = {
    userName: string;
};

export type UserTeam = {
    teamId: string;
    teamName: string;
    isOwner?: boolean;
    role?: TeamRoles;
};

export type UserUpdate = {
    email?: string | null;
    password?: string | null;
    name?: string | null;
    isSuperuser?: boolean | null;
    isActive?: boolean | null;
    isVerified?: boolean | null;
};

export type SystemHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type SystemHealthResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: SystemHealth;
};

export type SystemHealthResponse = SystemHealthResponses[keyof SystemHealthResponses];

export type AccountLoginData = {
    body: AccountLogin;
    path?: never;
    query?: never;
    url: '/api/access/login';
};

export type AccountLoginErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AccountLoginError = AccountLoginErrors[keyof AccountLoginErrors];

export type AccountLoginResponses = {
    /**
     * Document created, URL follows
     */
    201: OAuth2Login;
};

export type AccountLoginResponse = AccountLoginResponses[keyof AccountLoginResponses];

export type AccountLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/access/logout';
};

export type AccountLogoutResponses = {
    /**
     * Document created, URL follows
     */
    201: {
        [key: string]: unknown;
    };
};

export type AccountLogoutResponse = AccountLogoutResponses[keyof AccountLogoutResponses];

export type AccountProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/me';
};

export type AccountProfileResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: User;
};

export type AccountProfileResponse = AccountProfileResponses[keyof AccountProfileResponses];

export type AccountRegisterData = {
    body: AccountRegister;
    path?: never;
    query?: never;
    url: '/api/access/signup';
};

export type AccountRegisterErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AccountRegisterError = AccountRegisterErrors[keyof AccountRegisterErrors];

export type AccountRegisterResponses = {
    /**
     * Document created, URL follows
     */
    201: User;
};

export type AccountRegisterResponse = AccountRegisterResponses[keyof AccountRegisterResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string> | null;
        createdBefore?: string | null;
        createdAfter?: string | null;
        updatedBefore?: string | null;
        updatedAfter?: string | null;
        searchField?: string | null;
        searchString?: string | null;
        searchIgnoreCase?: boolean | null;
        currentPage?: number;
        pageSize?: number;
        orderBy?: string | null;
        sortOrder?: 'asc' | 'desc' | null;
    };
    url: '/api/users';
};

export type ListUsersErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<User>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Document created, URL follows
     */
    201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * The user to delete.
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type DeleteUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Request fulfilled, nothing follows
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * The user to retrieve.
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type GetUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UserUpdate;
    path: {
        /**
         * The user to update.
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type UpdateUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: User;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type ListTeamsData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string> | null;
    };
    url: '/api/teams';
};

export type ListTeamsErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ListTeamsError = ListTeamsErrors[keyof ListTeamsErrors];

export type ListTeamsResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<Team>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ListTeamsResponse = ListTeamsResponses[keyof ListTeamsResponses];

export type CreateTeamData = {
    body: TeamCreate;
    path?: never;
    query?: never;
    url: '/api/teams';
};

export type CreateTeamErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type CreateTeamError = CreateTeamErrors[keyof CreateTeamErrors];

export type CreateTeamResponses = {
    /**
     * Document created, URL follows
     */
    201: Team;
};

export type CreateTeamResponse = CreateTeamResponses[keyof CreateTeamResponses];

export type DeleteTeamData = {
    body?: never;
    path: {
        /**
         * The team to delete.
         */
        team_id: string;
    };
    query?: never;
    url: '/api/teams/{team_id}';
};

export type DeleteTeamErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type DeleteTeamError = DeleteTeamErrors[keyof DeleteTeamErrors];

export type DeleteTeamResponses = {
    /**
     * Request fulfilled, nothing follows
     */
    204: void;
};

export type DeleteTeamResponse = DeleteTeamResponses[keyof DeleteTeamResponses];

export type GetTeamData = {
    body?: never;
    path: {
        /**
         * The team to retrieve.
         */
        team_id: string;
    };
    query?: never;
    url: '/api/teams/{team_id}';
};

export type GetTeamErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type GetTeamError = GetTeamErrors[keyof GetTeamErrors];

export type GetTeamResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: Team;
};

export type GetTeamResponse = GetTeamResponses[keyof GetTeamResponses];

export type UpdateTeamData = {
    body: TeamUpdate;
    path: {
        /**
         * The team to update.
         */
        team_id: string;
    };
    query?: never;
    url: '/api/teams/{team_id}';
};

export type UpdateTeamErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type UpdateTeamError = UpdateTeamErrors[keyof UpdateTeamErrors];

export type UpdateTeamResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: Team;
};

export type UpdateTeamResponse = UpdateTeamResponses[keyof UpdateTeamResponses];

export type AssignUserRoleData = {
    body: UserRoleAdd;
    path: {
        /**
         * The role to grant.
         */
        role_slug: string;
    };
    query?: never;
    url: '/api/roles/{role_slug}/assign';
};

export type AssignUserRoleErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AssignUserRoleError = AssignUserRoleErrors[keyof AssignUserRoleErrors];

export type AssignUserRoleResponses = {
    /**
     * Document created, URL follows
     */
    201: Message;
};

export type AssignUserRoleResponse = AssignUserRoleResponses[keyof AssignUserRoleResponses];

export type RevokeUserRoleData = {
    body: UserRoleRevoke;
    path: {
        /**
         * The role to revoke.
         */
        role_slug: string;
    };
    query?: never;
    url: '/api/roles/{role_slug}/revoke';
};

export type RevokeUserRoleErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type RevokeUserRoleError = RevokeUserRoleErrors[keyof RevokeUserRoleErrors];

export type RevokeUserRoleResponses = {
    /**
     * Document created, URL follows
     */
    201: Message;
};

export type RevokeUserRoleResponse = RevokeUserRoleResponses[keyof RevokeUserRoleResponses];

export type AddMemberToTeamData = {
    body: TeamMemberModify;
    path: {
        /**
         * The team to update.
         */
        team_id: string;
    };
    query: {
        users_service: unknown;
    };
    url: '/api/teams/{team_id}/members/add';
};

export type AddMemberToTeamErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AddMemberToTeamError = AddMemberToTeamErrors[keyof AddMemberToTeamErrors];

export type AddMemberToTeamResponses = {
    /**
     * Document created, URL follows
     */
    201: Team;
};

export type AddMemberToTeamResponse = AddMemberToTeamResponses[keyof AddMemberToTeamResponses];

export type RemoveMemberFromTeamData = {
    body: TeamMemberModify;
    path: {
        /**
         * The team to delete.
         */
        team_id: string;
    };
    query: {
        users_service: unknown;
    };
    url: '/api/teams/{team_id}/members/remove';
};

export type RemoveMemberFromTeamErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type RemoveMemberFromTeamError = RemoveMemberFromTeamErrors[keyof RemoveMemberFromTeamErrors];

export type RemoveMemberFromTeamResponses = {
    /**
     * Document created, URL follows
     */
    201: Team;
};

export type RemoveMemberFromTeamResponse = RemoveMemberFromTeamResponses[keyof RemoveMemberFromTeamResponses];

export type ListTagsData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string> | null;
        createdBefore?: string | null;
        createdAfter?: string | null;
        updatedBefore?: string | null;
        updatedAfter?: string | null;
        searchField?: string | null;
        searchString?: string | null;
        searchIgnoreCase?: boolean | null;
        orderBy?: string | null;
        sortOrder?: 'asc' | 'desc' | null;
    };
    url: '/api/tags';
};

export type ListTagsErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ListTagsError = ListTagsErrors[keyof ListTagsErrors];

export type ListTagsResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<ListTagsTagResponseBody>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    body: CreateTagTagRequestBody;
    path?: never;
    query?: never;
    url: '/api/tags';
};

export type CreateTagErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
    /**
     * Document created, URL follows
     */
    201: CreateTagTagResponseBody;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * The tag to delete.
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/tags/{tag_id}';
};

export type DeleteTagErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type DeleteTagError = DeleteTagErrors[keyof DeleteTagErrors];

export type DeleteTagResponses = {
    /**
     * Request fulfilled, nothing follows
     */
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagData = {
    body?: never;
    path: {
        /**
         * The tag to retrieve.
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/tags/{tag_id}';
};

export type GetTagErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type GetTagError = GetTagErrors[keyof GetTagErrors];

export type GetTagResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: GetTagTagResponseBody;
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type UpdateTagData = {
    body: UpdateTagTagRequestBody;
    path: {
        /**
         * The tag to update.
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/tags/{tag_id}';
};

export type UpdateTagErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type UpdateTagError = UpdateTagErrors[keyof UpdateTagErrors];

export type UpdateTagResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: UpdateTagTagResponseBody;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];
