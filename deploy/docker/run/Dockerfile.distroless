ARG PYTHON_BUILDER_IMAGE=3.11-slim-bullseye
ARG PYTHON_RUN_IMAGE=gcr.io/distroless/cc:nonroot


## ---------------------------------------------------------------------------------- ##
## ------------------------- Python base -------------------------------------------- ##
## ---------------------------------------------------------------------------------- ##
FROM python:${PYTHON_BUILDER_IMAGE} as python-base
ARG UV_INSTALL_ARGS=""
ENV UV_INSTALL_ARGS="${UV_INSTALL_ARGS}" \
    GRPC_PYTHON_BUILD_WITH_CYTHON=1 \
    PATH="/workspace/app/.venv/bin:/usr/local/bin:$PATH" \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random  \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8
## -------------------------- add common compiled libraries --------------------------- ##
RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y --no-install-recommends git tini \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /root/.cache \
    && rm -rf /var/apt/lists/* \
    && rm -rf /var/cache/apt/* \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && mkdir -p /workspace/app \
    ## -------------------------- upgrade default packages -------------------------------- ##
    && pip install --quiet --upgrade pip wheel setuptools cython virtualenv mypy

## ---------------------------------------------------------------------------------- ##
## ------------------------- Python build base -------------------------------------- ##
## ---------------------------------------------------------------------------------- ##
FROM python-base AS build-base
ARG UV_INSTALL_ARGS=""
ENV UV_INSTALL_ARGS="${UV_INSTALL_ARGS}" \
    GRPC_PYTHON_BUILD_WITH_CYTHON=1 \
    PATH="/workspace/app/.venv/bin:/usr/local/bin:$PATH"
## -------------------------- add development packages ------------------------------ ##
RUN apt-get install -y --no-install-recommends build-essential curl \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /root/.cache \
    && rm -rf /var/apt/lists/* \
    && rm -rf /var/cache/apt/* \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
## -------------------------- install application ----------------------------------- ##
WORKDIR /workspace/app
COPY pyproject.toml uv.lock README.md .pre-commit-config.yaml LICENSE Makefile \
    package.json package-lock.json vite.config.ts tsconfig.json \
    tailwind.config.cjs postcss.config.cjs components.json \
    ./
RUN python -m venv --copies /workspace/app/.venv \
    && /workspace/app/.venv/bin/pip install --quiet uv nodeenv cython mypy
COPY tools ./tools/
COPY public ./public/
COPY src/ui ./src/ui/
RUN uv sync ${UV_INSTALL_ARGS} --no-self  \
    && uv export ${UV_INSTALL_ARGS} --no-hashes --no-dev --output-file=requirements.txt
COPY src/app ./src/app/

RUN make build
VOLUME /workspace/app
## ---------------------------------------------------------------------------------- ##
## -------------------------------- runtime build ----------------------------------- ##
## ---------------------------------------------------------------------------------- ##
## ------------------------- use base image  ---------------------------------------- ##

FROM python-base as run-base
ARG ENV_SECRETS="runtime-secrets"
ENV ENV_SECRETS="${ENV_SECRETS}"
RUN addgroup --system --gid 65532 nonroot \
    && adduser --no-create-home --system --uid 65532 nonroot \
    && chown -R nonroot:nonroot /workspace \
    && python -m venv --copies /workspace/app/.venv
## -------------------------- install application ----------------------------------- ##
COPY --from=build-base --chown=65532:65532 /workspace/app/requirements.txt /tmp/requirements.txt
COPY --from=build-base --chown=65532:65532 /workspace/app/dist /tmp/
WORKDIR /workspace/app
RUN  /workspace/app/.venv/bin/pip install --quiet --disable-pip-version-check --no-deps --requirement=/tmp/requirements.txt
RUN /workspace/app/.venv/bin/pip install --quiet --disable-pip-version-check --no-deps /tmp/*.whl



## ---------------------------------------------------------------------------------- ##
## ------------------------- distroless runtime build ------------------------------- ##
## ---------------------------------------------------------------------------------- ##

## ------------------------- use distroless `cc` image  ----------------------------- ##
FROM ${PYTHON_RUN_IMAGE} as run-image
ARG ENV_SECRETS="runtime-secrets"
ARG CHIPSET_ARCH=x86_64-linux-gnu
ARG LITESTAR_APP="app.asgi:create_app"
ENV PATH="/workspace/app/.venv/bin:/bin:/usr/local/bin:$PATH" \
    ENV_SECRETS="${ENV_SECRETS}" \
    CHIPSET_ARCH="${CHIPSET_ARCH}" \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    LITESTAR_APP="${LITESTAR_APP}"
## ------------------------- copy python itself from builder -------------------------- ##

# this carries more risk than installing it fully, but makes the image a lot smaller
COPY --from=run-base /usr/local/lib/ /usr/local/lib/
COPY --from=run-base  /usr/local/bin/python /usr/local/bin/python
COPY --from=run-base /etc/ld.so.cache /etc/ld.so.cache

## -------------------------- add common compiled libraries --------------------------- ##

# add tini
COPY --from=run-base /usr/bin/tini-static /usr/local/bin/tini

# If seeing ImportErrors, check if in the python-base already and copy as below

# required by lots of packages - e.g. six, numpy, wsgi
COPY --from=run-base /lib/${CHIPSET_ARCH}/libz.so.1 /lib/${CHIPSET_ARCH}/
COPY --from=run-base /lib/${CHIPSET_ARCH}/libbz2.so.1.0 /lib/${CHIPSET_ARCH}/

# required by google-cloud/grpcio
COPY --from=run-base /usr/lib/${CHIPSET_ARCH}/libffi* /usr/lib/${CHIPSET_ARCH}/
COPY --from=run-base /lib/${CHIPSET_ARCH}/libexpat* /lib/${CHIPSET_ARCH}/
## -------------------------- install application ----------------------------------- ##
WORKDIR /workspace/app
COPY --from=run-base --chown=65532:65532 /workspace/app/.venv /workspace/app/.venv

## --------------------------- standardize execution env ----------------------------- ##


STOPSIGNAL SIGINT
EXPOSE 8000
ENTRYPOINT ["tini","--" ]
CMD [ "litestar","run","--host","0.0.0.0","--port","8000"]
VOLUME /workspace/app
