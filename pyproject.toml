[project]
authors = [{ name = "Cody Fincher", email = "cody@litestar.dev" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development",
  "Typing :: Typed",
]
dependencies = [
  "litestar[jinja,jwt,structlog]",
  "advanced-alchemy[uuid,obstore]",
  "psycopg[pool,binary]",
  "python-dotenv",
  "pwdlib[argon2]",
  "litestar-saq @ git+https://github.com/cofin/litestar-saq.git@main",
  "litestar-vite",
  "litestar-granian[uvloop] @ git+https://github.com/cofin/litestar-granian.git@main",
  "httpx-oauth",
]
description = "Reference application for building a fullstack application with Litestar."
keywords = ["litestar", "sqlalchemy", "alembic", "fullstack", "api", "asgi", "litestar", "vite", "spa"]
license = { text = "MIT" }
name = "app"
readme = "README.md"
requires-python = ">=3.11"
version = "0.2.0"

[project.urls]
Discord = "https://discord.gg/litestar"
Homepage = "https://github.com/litestar-org/litestar-fullstack"
Issue = "https://github.com/litestar-org/litestar-fullstack/issues/"
Source = "https://github.com/litestar-org/litestar-fullstack"

[project.scripts]
app = "app.__main__:run_cli"


[dependency-groups]
dev = [{ include-group = "docs" }, { include-group = "linting" }, { include-group = "test" }]
docs = [
  "sphinx",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-toolbox",
  "sphinx-design",
  "sphinx-click",
  "sphinxcontrib-mermaid>=0.9.2",
  "shibuya",
]
linting = [
  "pre-commit>=3.4.0",
  "mypy>=1.5.1",
  "ruff>=0.0.287",
  "slotscheck",
  "types-click",
  "types-passlib",
  "types-pyyaml",
  "pyright",
]
test = [
  "bump-my-version",
  "pytest",
  "pytest-xdist",
  "pytest-asyncio",
  "pytest-mock",
  "pytest-cov",
  "coverage[toml]",
  "pytest-sugar",
  "pytest-databases[postgres]>=0.1.0",
]


[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "setuptools"]

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.build]
dev-mode-dirs = ["src/py", "."]
ignore-vcs = true
sources = ["src/py"]

[tool.hatch.build.targets.sdist]
exclude = [".github", "docs"]
include = ["src/*", "tools/*", "resources", "LICENSE"]
skip-excluded-dirs = false

[tool.hatch.build.targets.wheel]
# artifacts = ["app/domain/web/public/*"]
packages = ["app"]

[tool.bumpversion]
allow_dirty = false
commit = false
commit_args = "--no-verify"
current_version = "0.2.0"
ignore_missing_files = false
ignore_missing_version = false
message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = ["{major}.{minor}.{patch}"]
sign_tags = false
tag = false
tag_message = "Bump version: {current_version} → {new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
replace = 'version = "{new_version}"'
search = 'version = "{current_version}"'

[[tool.bumpversion.files]]
filename = "src/js/package.json"
replace = '"version": "{new_version}"'
search = '"version": "{current_version}"'


[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
omit = ["**/*/tests/*", "**/*/migrations/**/*.py", "tools/*"]
parallel = true
relative_files = true

[tool.pytest.ini_options]
addopts = ["-q", "-ra"]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
  "ignore::DeprecationWarning:litestar.constants.*",
  "ignore::DeprecationWarning:litestar.utils.*",
  "ignore::DeprecationWarning:litestar.cli.*",
  "ignore::DeprecationWarning:httpx._client",
]
markers = ["unit: Execute unit tests", "integration: Execute integration tests"]
testpaths = ["tests", "src/py/tests"]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
  "src/py/app/db/migrations/versions/*.py",

]
fix = true
line-length = 120
src = ["src/py", "src/py/tests"]
target-version = "py311"

[tool.ruff.lint]
fixable = ["ALL"]
ignore = [
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "A005",    # flake8-builtins - module {name} shadows a Python standard-library module
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "E501",    # pydocstyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "RUF012",  # Ruff-specific rule - annotated with classvar
  "ANN401",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "ARG002",  # ignore for now; investigate
  "ARG003",  # ignore for now; investigate
  "PERF203", # ignore for now; investigate
  "PD011",   # pandas
  "PLR0912",
  "ISC001",
  "COM812",
  "CPY001",
  "PGH003",
  "FA100",
  "PLC0415", # import should be at the top of the file
  "PLR0904", # too many public methods
  "PLR0917",
  "PGH003",
  "PLC2701",
  "PLW3201",
  "PLR6301",
]
select = ["ALL"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TC", "ERA", "D", "RET", "E731", "RUF012", "FA100", "ARG001"]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"src/py/app/db/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"src/py/app/db/migrations/versions/*.py" = ["ANN201", "INP001"]
"src/py/app/db/models/*.py" = ["PLW0108"]
"src/py/tests/*.py" = ['D103', 'S101', 'D104', "PLR2004", "RUF029", "ARG001", "SLF001", "DOC"]
"tools/*.py" = ["INP001", "ERA001", "N999"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP001", "S603", "S404", "PLR0915"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 16

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.isort]
known-first-party = ['tests', 'app']

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog,selectin,selectinload"
skip = 'uv.lock, package-lock.json'

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
packages = ["app", "tests", "docs", "tools"]
plugins = []
python_version = "3.11"
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disable_error_code = "attr-defined,type-var,union-attr"
disallow_untyped_decorators = false
module = ["tests.*"]
warn_unused_ignores = false

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "sqlalchemy.*",
  "saq.*",
  "uvicorn.*",
  "aiohttp.*",
  "jsbeautifier",
  "jsbeautifier.*",
  "uvloop",
  "uvloop.*",
  "nodeenv",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["app.db.migrations.*", "app.lib.dto.*"]


[tool.pyright]
disableBytesTypePromotions = true
exclude = ["src/py/app/db/migrations"]
include = ["src/py/app", "src/py/tests"]
pythonVersion = "3.11"
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportUnknownMemberType = false
reportUnnecessaryTypeIgnoreComments = true
reportUnusedFunction = false
strict = ["src/py/app/**/*"]
venv = ".venv"
venvPath = "."
